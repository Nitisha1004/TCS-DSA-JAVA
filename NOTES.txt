 3.1 What is the difference between processes and threads ?
A process is an execution of a program, while a Thread is a single execution sequence within a process. A process can contain
multiple threads. A Thread is sometimes called a lightweight process

 3.2 Explain different ways of creating a thread. Which one would you prefer and
why?
There are three ways that can be used in order for a Thread to be created:
• A class may extend the Thread class.
• A class may implement the Runnable interface.
• An application can use the Executor framework, in order to create a thread pool.
The Runnable interface is preferred, as it does not require an object to inherit the Thread class. In case your application design
requires multiple inheritances, only interfaces can help you. Also, the thread pool is very efficient and can be implemented and
used very easily.

Explain the available thread states in a high-level.

During its execution, a thread can reside in one of the following states:
• Runnable: A thread becomes ready to run, but does not necessarily start running immediately.
• Running: The processor is actively executing the thread code.
• Waiting: A thread is in a blocked state waiting for some external processing to finish.
• Sleeping: The thread is forced to sleep.
• Blocked on I/O: Waiting for an I/O operation to complete.
• Blocked on Synchronization: Waiting to acquire a lock.
• Dead: The thread has finished its execution

A loop in a linked list is a condition that occurs when the linked list does not have any end. 

When the loop exists in the linked list, the last pointer does not point to the Null as observed in the singly linked list or doubly linked list and to the head of the linked list observed in the circular linked list. 

When the loop exists, it points to some other node, also known as the linked list cycle.

public class LinkedList {
  Node head;

  class Node {
    int data;
    Node next;
    Node(int d) {
      data = d;
      next = null;
    }
  }

  public void push(int new_data) {
    Node new_node = new Node(new_data);
   
 new_node.next = head;
    head = new_node;
  }

  void detectLoop() {
    Node slow_p = head, fast_p = head;
    int flag = 0;
    while (slow_p != null && fast_p != null &&
      fast_p.next != null) {
      slow_p = slow_p.next;
      fast_p = fast_p.next.next;
      if (slow_p == fast_p) {
        flag = 1;
        break;
      }
    }
   

  if (flag == 1)
      System.out.println("Loop found");
    else
      System.out.println("Loop not found");
  } public static void main(String args[]) {
    LinkedList llist = new LinkedList();

    llist.push(20);
    llist.push(4);
    llist.push(15);
    llist.push(10);

    llist.head.next.next.next.next = llist.head;

    llist.detectLoop();
  }
}
Stock Span Problem

The stock span problem is a financial problem where we have a series of n daily price quotes for a stock and we need to calculate the span of stocks price for all n days. 

The span Si of the stocks price on a given day i is defined as the maximum number of consecutive days just before the given day, for which the price of the stock on the current day is less than or equal to its price on the given day.


For example, if an array of 7 days prices is given as {100, 80, 60, 70, 60, 75, 85}, then the span values for corresponding 7 days are {1, 1, 1, 2, 1, 4, 6}.

Given an unsorted list of nodes. The task is to remove duplicates from the list. 

Examples:

Input: 
12->11->12->21->41->43->21 
Output: 
12->11->21->41->43.

4. how does garbage collection prevent a java application from going out of memory?
How does Garbage Collection prevent a Java application from going out of memory?

It doesn’t! Garbage Collection simply cleans up unused memory when an object goes out of scope and is no longer needed. However an application could create a huge number of large objects that causes an OutOfMemoryError.

5.What is Function Overriding and Overloading in Java?
Answer

Method overloading in Java occurs when two or more methods in the same class have the exact same name, but different parameters.

class Dog{
    public void bark(){
        System.out.println("woof ");
    }
 
    //overloading method
    public void bark(int num){
    	for(int i=0; i<num; i++)
    		System.out.println("woof ");
    }
}


On the other hand, method overriding is defined as the case when a child class redefines the same method as a parent class. Overridden methods must have the same name, argument list, and return type. The overriding method may not limit the access of the method it overrides.

class Dog{
    public void bark(){
        System.out.println("woof ");
    }
}
class Hound extends Dog{
    public void sniff(){
        System.out.println("sniff ");
    }
 
    public void bark(){
        System.out.println("bowl");
    }
}
 
public class OverridingTest{
    public static void main(String [] args){
        Dog dog = new Hound();
        dog.bark();
    }
}

diff between exception and error?
difference between hashmap and hashtable?
What is Function Overriding and Overloading in Java?
Answer

Method overloading in Java occurs when two or more methods in the same class have the exact same name, but different parameters.

class Dog{
    public void bark(){
        System.out.println("woof ");
    }
 
    //overloading method
    public void bark(int num){
    	for(int i=0; i<num; i++)
    		System.out.println("woof ");
    }
}


On the other hand, method overriding is defined as the case when a child class redefines the same method as a parent class. Overridden methods must have the same name, argument list, and return type. The overriding method may not limit the access of the method it overrides.

class Dog{
    public void bark(){
        System.out.println("woof ");
    }
}
class Hound extends Dog{
    public void sniff(){
        System.out.println("sniff ");
    }
 
    public void bark(){
        System.out.println("bowl");
    }
}
 
public class OverridingTest{
    public static void main(String [] args){
        Dog dog = new Hound();
        dog.bark();
    }
}
What differences exist between HashMap and Hashtable?

There are several differences between HashMap and Hashtable in Java:

Hashtable is synchronized, whereas HashMap is not. This makes HashMap better for non-threaded applications, as unsynchronized Objects typically perform better than synchronized ones.

Hashtable does not allow null keys or values. HashMap allows one null key and any number of null values.

One of HashMap's subclasses is LinkedHashMap, so in the event that you'd want predictable iteration order (which is insertion order by default), you could easily swap out the HashMap for a LinkedHashMap. This wouldn't be as easy if you were using Hashtable.
What is the difference between Exception and Error in Java?

Answer
An Error "indicates serious problems that a reasonable application should not try to catch."
An Exception "indicates conditions that a reasonable application might want to catch."
Is there anything like static class in Java?

Java has no way of making a top-level class static but you can simulate a static class like this:

Declare your class final - Prevents extension of the class since extending a static class makes no sense
Make the constructor private - Prevents instantiation by client code as it makes no sense to instantiate a static class
Make all the members and functions of the class static - Since the class cannot be instantiated no instance methods can be called or instance fields accessed
Note that the compiler will not prevent you from declaring an instance (non-static) member. The issue will only show up if you attempt to call the instance member
diff between arraylist and linked list?
what is exception handling?

Problem
Write a Java Program to check Armstrong number.

Solution

First of all we need to understand what Armstrong Number is. Armstrong number is the number which is the sum of the cubes of all its unit, tens and hundred digits for three-digit numbers.

153 = 1*1*1 + 5*5*5 + 3*3*3 = 1 + 125 + 27 = 153

If you have a four-digit number lets say

1634 = 1*1*1*1 + 6*6*6*6 + 3*3*3*3 + 4*4*4*4 = 1 + 1296 + 81 + 256 = 1634

Now, in this program, we have a temp and integers declared. We have initialized c with value 0. Then, we need to assign the integer value which we are going to check for Armstrong (in our case, let us say 153). Then we have assigned our temp variable with that number which we are going to check.

Thereafter, we have used while conditional check where the remainder is assigned to a and the number is divided by 10 and assigned to n. Now, our c variable which was set to zero initially is assigned with c+(a*a*a). Suppose we have to evaluate a four-digit number then c should be assigned with c + (a*a*a*a).

Lastly, we have put an if-else statement for conditional checking where we have compared the value contained in c against temp(which has the actual number stored at this point). If it matches, then the number is Armstrong otherwise not.

class Armstrong{  
 public static void main(String[] args)  {  
   int c=0,a,temp;  
   int n=153;//It is the number to check Armstrong  
   temp=n;  
   while(n&gt;0)  
   {  
   a=n%10;  
   n=n/10;  
    c=c+(a*a*a);  
    }  
    if(temp==c)  
    System.out.println("armstrong number");   
    else 
        System.out.println("Not armstrong number");   
   }  
}


Output:
armstrong number